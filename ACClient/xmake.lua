add_requires("asmjit", "base-n", "frozen", "lazy_importer", "spdlog", "stduuid", "thread-pool")


target("ACClient")
    set_kind("shared")
    set_warnings("all")
    
    add_files("src/**.cpp")
    add_headerfiles("src/**.hpp")
    add_includedirs("src/")
    add_deps("ACShared", "LinuxPE", "safetyhook")
    add_defines(
        "BS_THREAD_POOL_ENABLE_NATIVE_HANDLES", 
        "BS_THREAD_POOL_ENABLE_PRIORITY", 
        "BS_THREAD_POOL_NATIVE_EXTENSIONS", 
        "UUID_SYSTEM_GENERATOR"
    )
    add_cxflags("/GR-")
    add_packages(
        "asmjit",
        "base-n",
        "frozen",
        "hopscotch-map",
        "lazy_importer",
        "spdlog",
        "stduuid",
        "thread-pool",
        "tiltedcore",
        "wil",
        "zydis"
    )
    add_syslinks("Ntdll", "Kernel32", "Ole32", "User32", "Version")
    set_policy("build.optimization.lto", true)
    on_load(function(target)
        import("net.http")
        -- Creates a static list of vulnerable drivers based on info from loldrivers
        -- Should probably have a custom maintained one based on info from production
        local sha256HashesOfVulnerableDrivers = {}

        local HVCIMalicious = "https://raw.githubusercontent.com/magicsword-io/LOLDrivers/refs/heads/main/detections/hashes/LoadsDespiteHVCI.samples_malicious.sha256"
        local HVCIVulnerable = "https://raw.githubusercontent.com/magicsword-io/LOLDrivers/refs/heads/main/detections/hashes/LoadsDespiteHVCI.samples_vulnerable.sha256"
        local Malicious = "https://raw.githubusercontent.com/magicsword-io/LOLDrivers/refs/heads/main/detections/hashes/samples_malicious.sha256"
        local Vulnerable = "https://raw.githubusercontent.com/magicsword-io/LOLDrivers/refs/heads/main/detections/hashes/samples_vulnerable.sha256"

        -- Note: our internal hexstring alphabet is uppercase, we'll need to turn these to upper as well

        local scriptDir = target:scriptdir()

        os.rm("Temp/*")

        for it, v in ipairs({
            HVCIMalicious,
            HVCIVulnerable,
            Malicious,
            Vulnerable
        }) do
            local filePath = path.join(scriptDir, string.format("Temp/%d.txt", it))
            http.download(v, filePath)

            for hash in io.lines(filePath) do
                sha256HashesOfVulnerableDrivers[hash:upper()] = true
            end
        end

        os.rm("Temp/*")

        local fileTemplate = [[
#pragma once
#include <Shared/Pico.hpp>
#include <frozen/set.h>

/*
    THIS FILE HAS BEEN GENERATED BY THE BUILD SYSTEM ON %s, DO NOT TOUCH BY HAND!
*/

namespace pico::Generated 
{
inline static constexpr auto VulnerableDriverHashes = frozen::make_set<pico::Uint64>(
    {%s});
};
]]

        local concatTable = {}

        for k in pairs(sha256HashesOfVulnerableDrivers) do
            table.insert(concatTable, string.format("shared::FNV1a64(\"%s\")", k))
        end

        table.sort(concatTable)

        fileTemplate = string.format(fileTemplate, os.date("%d/%m/%Y %H.%M.%S"), table.concat(concatTable, ",\n\t "))

        io.writefile(path.join(scriptDir, "src/Engine/DriverSnap/VulnerableDriverList.hpp"), fileTemplate)
    end)

add_rules("plugin.vsxmake.autoupdate")